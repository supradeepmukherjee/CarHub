// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdCars   Car[]
  savedCars     Car[]     @relation("savedCars")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  reqs          TestReq[]
  msgs          Msg[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Car {
  id           String        @id @default(uuid())
  name         String
  brand        String
  type         CarType
  year         Int
  mileage      Int
  colors       String[]
  price        Float
  desc         String
  imgs         String[]
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  isSold       Boolean?      @default(false)
  isFeatured   Boolean?      @default(false)
  isNew        Boolean?      @default(false)
  features     String[]
  location     String
  fuelType     FuelType?     @default(ELECTRIC)
  transmission Transmission? @default(MANUAL)
  savedBy      User[]        @relation("savedCars")
  specs        Specs?
  seller       Seller?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reqs         TestReq[]
}

model Specs {
  id           String   @id @default(uuid())
  capacity     Int?
  hp           Int?
  torque       Int?
  doors        Int?
  acceleration Float?
  zeroToSixty  Float?
  topSpeed     Int?
  length       Int?
  width        Int?
  height       Int?
  weight       Int?
  carId        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  car          Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId])
}

model Seller {
  id         String   @id @default(uuid())
  name       String
  img        String?
  phone      String?
  email      String?
  website    String?
  address    String?
  city       String?
  state      String?
  country    String?
  postalCode String?
  carId      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  car        Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model TestReq {
  id        String    @id @default(uuid())
  carId     String
  userId    String
  date      DateTime
  status    ReqStatus @default(PENDING)
  car       Car       @relation(fields: [carId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([carId, userId])
}

model Msg {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  content   String
  userId    String
  receiver  User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CarType {
  SEDAN
  SUV
  TRUCK
  COUPE
  CONVERTIBLE
  HATCHBACK
  WAGON
  VAN
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum ReqStatus {
  PENDING
  APPROVED
  REJECTED
}
